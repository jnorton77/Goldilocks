<style>
  body {
  /*font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;*/
  /*margin: auto;*/
  /*width: 960px;*/
  /*padding-top: 20px;*/
  /*background-color: #012647;*/
}

text {
  font-family: "RamaGothicM-Heavy",Impact,Haettenschweiler,"Franklin Gothic Bold",Charcoal,"Helvetica Inserat","Bitstream Vera Sans Bold","Arial Black",sans-serif;
  font-size: 7rem;
  font-weight: 400;
  line-height: 16rem;
  fill: green;
}

#donut {
  width: 29rem;
  height: 29rem;
  margin: 0 auto;
}

path.color0 {
  fill: green;
}

path.color1 {
  fill: lightgreen;
}

.chart {
    background: #eee;
    padding: 3px;
}

.chart div {
  width: 0;
  transition: all 1s ease-out;
  -moz-transition: all 1s ease-out;
  -webkit-transition: all 1s ease-out;
}

.chart div {
  font: 10px sans-serif;
  background-color: steelblue;
  text-align: right;
  padding: 3px;
  margin: 5px;
  color: white;
  box-shadow: 2px 2px 2px #666;
}

.horizontal-bar-graph {
  display: table;
  width: 100%;
}

.horizontal-bar-graph-segment {
  display: table-row;
}

.horizontal-bar-graph-label {
  display: table-cell;
  border-right: 1px solid silver; 
  text-align: right;
  padding: 4px 10px 4px 0;
  vertical-align: baseline;
  white-space: nowrap;
}

.horizontal-bar-graph-value {
  display: table-cell;
  padding: 3px 0;
  vertical-align: baseline;
  width: 100%;
}

.horizontal-bar-graph-value-bar {
  background: silver;
  @include box-sizing(padding-box);
  padding: 4px 4px 3px;
  height: 1em;
  text-align: right;
  color: white;
  overflow: visible;
  display: inline-block;
  white-space: nowrap;
  -webkit-font-smoothing: antialiased;
}

.horizontal-bar-graph-segment:first-child {
  .horizontal-bar-graph-label { padding-top: 12px; }
  .horizontal-bar-graph-value { padding-top: 11px; }
}
.horizontal-bar-graph-segment:last-child {
  .horizontal-bar-graph-label { padding-bottom: 12px; }
  .horizontal-bar-graph-value { padding-bottom: 11px; }
}

</style>

<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js"></script>

<div id="index_buttons">
     <a href="/results/today"><%= button_tag "today", id: "today" %></a><!--
  --><a href="/results/yesterday"><%= button_tag "yesterday", id: "yesterday" %></a><!--
  --><a href="/results/thisWeek"><%= button_tag "this week", id: "week" %></a>
</div>

<h1>Dev Bootcamp <span style="color: green;">LEARNING ZONE</span></h1>
<div id="donut" margin="0 auto" data-donut=<%= @learning.to_f / @all_responses * 100 %>>
</div>

<!-- <svg class="test-svg"></svg> -->

<div class="horizontal-bar-graph" id="my-graph"></div>


<br><br>
<h2 style="display:none; float:right; color:gray;" class="quotes">... a state of psychological stability and composure which is undisturbed by experience of or exposure to emotions, pain, or other phenomena that may cause others to lose the balance of their mind.</h2>
<h2 style="display:none; float:right; color:gray;" class="quotes">... having an even mind</h2>
<h2 style="display:none; float:right; color:gray;" class="quotes">... mental calmness, composure, and evenness of temper, esp. in a difficult situation.</h2>

<%= javascript_tag do %>
  panic = <%= @panic %>
  panicEdge = <%= @panic_edge %>
  learning = <%= @learning %>
  comfortEdge = <%= @comfort_edge %>
  comfort = <%= @comfort %>
<% end %>

<script>

HorizontalBarGraph = function(el, series) {
  this.el = d3.select(el);
  this.series = series;
};

HorizontalBarGraph.prototype.draw = function() {
  var x = d3.scale.linear()
    .domain([0, d3.max(this.series, function(d) { return d.value })])
    .range([0, 100]);

  var segment = this.el
    .selectAll(".horizontal-bar-graph-segment")
      .data(this.series)
    .enter()
      .append("div").classed("horizontal-bar-graph-segment", true);

  segment
    .append("div").classed("horizontal-bar-graph-label", true)
      .text(function(d) { return d.label });

  segment
    .append("div").classed("horizontal-bar-graph-value", true)
      .append("div").classed("horizontal-bar-graph-value-bar", true)
        .style("background-color", function(d) { return d.color })
        .text(function(d) { return d.inner_label ? d.inner_label : "" })
        .transition()
          .duration(1000)
          .style("min-width", function(d) { return x(d.value) + "%" });

};

var graph = new HorizontalBarGraph('#my-graph', [
  {label: "Panic", value: panic, color: "red" },
  {label: "Panic Edge", value: panicEdge,  color: "orange" },
  {label: "Learning", value: learning,  color: "green" },
  {label: "Comfort Edge", value: comfortEdge,  color: "orange" },
  {label: "Comfort", value: comfort,  color: "red" }


]);
graph.draw();

angular.module('myApp', []).

   directive('bars', function ($parse) {
      return {
         restrict: 'E',
         replace: true,
         template: '<div id="chart"></div>',
         link: function (scope, element, attrs) {
           var data = attrs.data.split(','),
           chart = d3.select('#chart')
             .append("div").attr("class", "chart")
             .selectAll('div')
             .data(data).enter()
             .append("div")
             .transition().ease("elastic")
             .transition.duration([1000])
             .style("width", function(d) { return d - 150 + "%"; })
             .text(function(d) { return d + "%"; });
         } 
      };
   });

  $(function() {

  var svg = d3.select('svg.test-svg');

  svg.selectAll('rect')
    .data([64, 128, 256, 512, 864])
    .enter().append('rect')
    .attr('x', 0)
    .attr('y', function(d,i){ return i*0+50; })
    .attr('width', function(d){ return d })
    .attr('height', 1)
    .style('fill', '#f44441');


  svg.selectAll('rect') 
    .data([panic, panicEdge, learning, comfortEdge, comfort])
    .transition()
    .delay(1000)
    .duration(3000)
    .attr('x', 0)
    .attr('y', function(d,i){ return i*150+50; })
    .attr('width', function(d){ return d })
    .attr('height', 100)
    .style('fill', '#f44441');
  });



(function() {

    var quotes = $(".quotes");
    var quoteIndex = -1;
    
    function showNextQuote() {
        ++quoteIndex;
        quotes.eq(quoteIndex % quotes.length)
            .fadeIn(2000)
            .delay(2000)
            .fadeOut(2000, showNextQuote);
    }
    
    showNextQuote();
    
})();

var duration   = 1500,
    transition = 200;

drawDonutChart(
  '#donut',
  $('#donut').data('donut'),
  290,
  290,
  ".35em"
);

function drawDonutChart(element, percent, width, height, text_y) {
  width = typeof width !== 'undefined' ? width : 290;
  height = typeof height !== 'undefined' ? height : 290;
  text_y = typeof text_y !== 'undefined' ? text_y : "-.10em";

  var dataset = {
        lower: calcPercent(0),
        upper: calcPercent(percent)
      },
      radius = Math.min(width, height) / 2,
      pie = d3.layout.pie().sort(null),
      format = d3.format(".0%");

  var arc = d3.svg.arc()
        .innerRadius(radius - 20)
        .outerRadius(radius);

  var svg = d3.select(element).append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

  var path = svg.selectAll("path")
        .data(pie(dataset.lower))
        .enter().append("path")
        .attr("class", function(d, i) { return "color" + i })
        .attr("d", arc)
        .each(function(d) { this._current = d; }); // store the initial values

  var text = svg.append("text")
        .attr("text-anchor", "middle")
        .attr("dy", text_y);

  if (typeof(percent) === "string") {
    text.text(percent);
  }
  else {
    var progress = 0;
    var timeout = setTimeout(function () {
      clearTimeout(timeout);
      path = path.data(pie(dataset.upper)); // update the data
      path.transition().duration(duration).attrTween("d", function (a) {
        // Store the displayed angles in _current.
        // Then, interpolate from _current to the new angles.
        // During the transition, _current is updated in-place by d3.interpolate.
        var i  = d3.interpolate(this._current, a);
        var i2 = d3.interpolate(progress, percent)
        this._current = i(0);
        return function(t) {
          text.text( format(i2(t) / 100) );
          return arc(i(t));
        };
      }); // redraw the arcs
    }, 200);
  }
};

function calcPercent(percent) {
  return [percent, 100-percent];
};

</script>





